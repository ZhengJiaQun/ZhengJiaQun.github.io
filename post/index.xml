<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ZJQ Blog</title>
    <link>https://zhengjiaqun.github.io/post/</link>
    <description>Recent content in Posts on ZJQ Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 25 Jul 2019 09:05:13 +0800</lastBuildDate>
    
	<atom:link href="https://zhengjiaqun.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Position属性</title>
      <link>https://zhengjiaqun.github.io/post/new/</link>
      <pubDate>Thu, 25 Jul 2019 09:05:13 +0800</pubDate>
      
      <guid>https://zhengjiaqun.github.io/post/new/</guid>
      <description>本篇文章主要介绍元素的Position属性，此属性可以设置元素在页面的定位方式。
目录 1. 介绍 position：介绍position的值以及辅助属性。
2. position 定位方式：介绍position的四种定位方式：绝对、相对、固定、默认。
3. 总结 position：以示例的方式展示position。
1. 介绍 1.1 说明 Position 属性：规定元素的定位类型。即元素脱离文档流的布局，在页面的任意位置显示。
1.2 主要的值 ①absolute ：绝对定位；脱离文档流的布局，遗留下来的空间由后面的元素填充。定位的起始位置为最近的父元素(postion不为static)，否则为Body文档本身。
②relative ：相对定位；不脱离文档流的布局，只改变自身的位置，在文档流原先的位置遗留空白区域。定位的起始位置为此元素原先在文档流的位置。
③fixed ：固定定位；类似于absolute，但不随着滚动条的移动而改变位置。
④static ：默认值；默认布局。
1.3 辅助属性 position属性只是使元素脱离文档流，要想此元素能按照希望的位置显示，就需要使用下面的属性(position:static不支持这些)：
①left ： 表示向元素的左边插入多少像素，使元素向右移动多少像素。
②right ：表示向元素的右边插入多少像素，使元素向左移动多少像素。
③top ：表示向元素的上方插入多少像素，使元素向下移动多少像素。
④bottom ：表示向元素的下方插入多少像素，使元素向上移动多少像素。
上面属性的值可以为负，单位：px 。
2. position 定位方式 2.1 position:absolute 2.1.1 说明 绝对定位；脱离文档流的布局，遗留下来的空间由后面的元素填充。定位的起始位置为最近的父元素(postion不为static)，否则为Body文档本身。
2.1.2 视图 2.2 position:relative 2.2.1 说明 相对定位；不脱离文档流的布局，只改变自身的位置，在文档流原先的位置遗留空白区域。定位的起始位置为此元素原先在文档流的位置。
2.2.2 视图 2.3 position:fixed 2.3.1 说明 固定定位；类似于absolute，但不随着滚动条的移动而改变位置。
2.3.2 视图 2.3.3 应用场景 ①登录框覆盖层：如dz论坛的登录。
②虚假QQ消息广告。</description>
    </item>
    
    <item>
      <title>委托</title>
      <link>https://zhengjiaqun.github.io/post/second/</link>
      <pubDate>Tue, 16 Jul 2019 16:53:13 +0800</pubDate>
      
      <guid>https://zhengjiaqun.github.io/post/second/</guid>
      <description>委托给了C#操作函数的灵活性，我们可使用委托像操作变量一样来操作函数，其实这个功能并不是C#的首创，早在C++时代就有函数指针这一说法，而在我看来委托就是C#的函数指针，首先先简要的介绍一下委托的基本知识：
委托的定义 委托的声明原型是 delegate &amp;lt;函数返回类型&amp;gt; &amp;lt;委托名&amp;gt; (&amp;lt;函数参数&amp;gt;) 例子：public delegate void CheckDelegate(int number);//定义了一个委托CheckDelegate,它可以注册返回void类型且有一个int作为参数的函数 这样就定义了一个委托，但是委托在.net内相当于声明了一个类(在后面的代码中会讲到确实如此)，类如果不实例化为对象，很多功能是没有办法使用的，委托也是如此.
委托的实例化 委托实例化的原型是 &amp;lt;委托类型&amp;gt; &amp;lt;实例化名&amp;gt;=new &amp;lt;委托类型&amp;gt;(&amp;lt;注册函数&amp;gt;) 例子：CheckDelegate _checkDelegate=new CheckDelegate(CheckMod);//用函数CheckMod实例化上面的CheckDelegate 委托为_checkDelegate 在.net 2.0开始可以直接用匹配的函数实例化委托： &amp;lt;委托类型&amp;gt; &amp;lt;实例化名&amp;gt;=&amp;lt;注册函数&amp;gt; 例子：CheckDelegate _checkDelegate=CheckMod;//用函数CheckMod实例化上面的CheckDelegate 委托为_checkDelegate 现在我们就可以像使用函数一样来使用委托了,在上面的例子中现在执行_checkDelegate()就等同于执行CheckMod(),最关键的是现在函数CheckMod相当于放在了变量当中，它可以传递给其它的CheckDelegate引用对象，而且可以作为函数参数传递到其他函数内，也可以作为函数的返回类型</description>
    </item>
    
    <item>
      <title>MarkDown语法</title>
      <link>https://zhengjiaqun.github.io/post/third/</link>
      <pubDate>Tue, 16 Jul 2019 16:02:41 +0800</pubDate>
      
      <guid>https://zhengjiaqun.github.io/post/third/</guid>
      <description>#标题一 ##标题二 *这一点 加粗 斜体 删除线 在文字前添加&amp;gt; 点击保存后的效果是：
如果你无法简洁的表达你的想法，那只说明你还不够了解它。
有序列表 在行首添加1.、2.、3.，即数字和英文句点，数字不需要连续的，也可以都是1.
无序列表 在行首添加*或- *无序列表1 *无序列表2
插入链接 [描述][链接地址]
表格 | 笔记|更新 | 版本 | |&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;|&amp;mdash;&amp;mdash;&amp;ndash;| | WizNote | Markdown| Latest |
代码 在代码的前后添加三个反单引号：“““,其中前三个反单引号后面可以根写代码语言的名字，以方面渲染。例如：
alert(&amp;quot;hello world!&amp;quot;);  1 目录 在任何想要展示Markdown笔记目录的地方，添加[TOC]
脚注
在要添加注释的词语后面添加[^1],结尾加入[^1]:空格 注释内容 作者：萝卜-兔子 来源：CSDN 原文：https://blog.csdn.net/abcwangruili/article/details/78020201 版权声明：本文为博主原创文章，转载请附上博文链接！</description>
    </item>
    
    <item>
      <title>这是我的第一篇博客文章</title>
      <link>https://zhengjiaqun.github.io/post/first/</link>
      <pubDate>Tue, 16 Jul 2019 15:07:11 +0800</pubDate>
      
      <guid>https://zhengjiaqun.github.io/post/first/</guid>
      <description>第一篇博客文章
一、MVC简介
MVC：Model-View-Controller（模型-视图-控制器），MVC是一种软件开发架构模式。
1、模型（Model）
模型对象是实现应用程序数据域逻辑的应用程序部件。 通常，模型对象会检索模型状态并将其存储在数据库中。 例如，Product 对象可能会从数据库中检索信息，操作该信息，然后将更新的信息写回到数据库内的 Product 表中。
2、视图（View）
视图是显示应用程序用户界面 (UI) 的组件。通常，此 UI 是用模型数据创建的。Product表的编辑视图便是一个视图示例，该视图基于 Product 对象的当前状态显示文本框、下拉列表和复选框。
3、控制器(Controller)
控制器是处理用户交互、使用模型并最终选择要呈现的视图来显示 UI 的组件。 在MVC 应用程序中，视图仅显示信息；控制器则用于处理和响应用户输入和交互。 例如，控制器处理查询字符串值，并将这些值传递给模型，而模型可能会使用这些值来查询数据库。</description>
    </item>
    
  </channel>
</rss>