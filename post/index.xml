<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ZJQ Blog</title>
    <link>https://ZhengJiaQun.github.io/post/</link>
    <description>Recent content in Posts on ZJQ Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 16 Jul 2019 16:02:41 +0800</lastBuildDate>
    
	<atom:link href="https://ZhengJiaQun.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MarkDown语法</title>
      <link>https://ZhengJiaQun.github.io/post/third/</link>
      <pubDate>Tue, 16 Jul 2019 16:02:41 +0800</pubDate>
      
      <guid>https://ZhengJiaQun.github.io/post/third/</guid>
      <description>#标题一 ##标题二 *这一点 加粗 斜体 删除线 在文字前添加&amp;gt; 点击保存后的效果是：
如果你无法简洁的表达你的想法，那只说明你还不够了解它。
有序列表 在行首添加1.、2.、3.，即数字和英文句点，数字不需要连续的，也可以都是1.
无序列表 在行首添加*或- *无序列表1 *无序列表2
插入图片 插入链接 [描述][链接地址]
表格 | 笔记|更新 | 版本 | |&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;|&amp;mdash;&amp;mdash;&amp;ndash;| | WizNote | Markdown| Latest |
代码 在代码的前后添加三个反单引号：“““,其中前三个反单引号后面可以根写代码语言的名字，以方面渲染。例如：
alert(&amp;quot;hello world!&amp;quot;);  1 目录 在任何想要展示Markdown笔记目录的地方，添加[TOC]
脚注
在要添加注释的词语后面添加[^1],结尾加入[^1]:空格 注释内容 作者：萝卜-兔子 来源：CSDN 原文：https://blog.csdn.net/abcwangruili/article/details/78020201 版权声明：本文为博主原创文章，转载请附上博文链接！</description>
    </item>
    
    <item>
      <title>这是我的第一篇博客文章</title>
      <link>https://ZhengJiaQun.github.io/post/first/</link>
      <pubDate>Tue, 16 Jul 2019 15:07:11 +0800</pubDate>
      
      <guid>https://ZhengJiaQun.github.io/post/first/</guid>
      <description>第一篇博客文章
一、MVC简介
MVC：Model-View-Controller（模型-视图-控制器），MVC是一种软件开发架构模式。
1、模型（Model）
模型对象是实现应用程序数据域逻辑的应用程序部件。 通常，模型对象会检索模型状态并将其存储在数据库中。 例如，Product 对象可能会从数据库中检索信息，操作该信息，然后将更新的信息写回到数据库内的 Product 表中。
2、视图（View）
视图是显示应用程序用户界面 (UI) 的组件。通常，此 UI 是用模型数据创建的。Product表的编辑视图便是一个视图示例，该视图基于 Product 对象的当前状态显示文本框、下拉列表和复选框。
3、控制器(Controller)
控制器是处理用户交互、使用模型并最终选择要呈现的视图来显示 UI 的组件。 在MVC 应用程序中，视图仅显示信息；控制器则用于处理和响应用户输入和交互。 例如，控制器处理查询字符串值，并将这些值传递给模型，而模型可能会使用这些值来查询数据库。</description>
    </item>
    
  </channel>
</rss>