<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ZJQ Blog</title>
    <link>https://zhengjiaqun.github.io/post/</link>
    <description>Recent content in Posts on ZJQ Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 26 Jul 2019 14:36:00 +0800</lastBuildDate>
    
	<atom:link href="https://zhengjiaqun.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hugo博客搭建过程</title>
      <link>https://zhengjiaqun.github.io/post/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Fri, 26 Jul 2019 14:36:00 +0800</pubDate>
      
      <guid>https://zhengjiaqun.github.io/post/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/</guid>
      <description>Hugo+Github搭建个人博客 1.下载安装hugo和git，hugo可以到Github上下载，下载到电脑后把hugo.exe文件所在的目录添加到电脑环境path中。打开git base ，hugo version,出现图中信息就成功安装了。
2.在电脑新建一个Blog文件夹存放博客文件，进入Blog， 使用hugo new site myblog,这样就在myblog下生成初始站点。
3.在myblog根目录下clone hugo主题，并在本地编译调试启动。首次执行hugo server &amp;ndash;theme=主题名 &amp;ndash;buildDrafts与主题名关联。
4.进入content文件夹，hugo new post/xxx.md新建一篇markdown格式文章并用VS Code编辑并保存。
5.在github上部署，新建一个仓库并命名为“你的github名.github.io”,回到根目录myblog，使用hugo &amp;ndash;theme=主题名 baseUrl=“https://ZhengJiaQun.github.io/” 生成最终页面。进入生成的public文件夹。
1.git init
2.git remote add origin https://ZhengJiaQun/ZhengJiaQun.github.io
3.git add .
4.git commit -m &amp;ldquo;提交信息&amp;rdquo;
5.git push origin master
6.后续写文章时可以省去一些工作，同样写好文档后回到根目录，执行hugo server -D 本地先编译预览看效果。访问localhost：1313
7.预览后觉得符合期待后在根目录再次执行hugo 生成新的public里的页面，不符合可在本地预览开启的时候继续修改，会马上看到页面效果。
8.本地的没问题了，就得把更新的文章推送到远端仓库。进入public文件夹。和第一次的操作很类似，但不需要再次关联远端仓库了，还有push之前需要先pull，以后更新也都是这样操作。
1.git add .
2.git commit -m &amp;ldquo;提交信息&amp;rdquo;
3.git pull origin master
4.git push origin master
如果一些顺利，就可以再次访问博客了，就可以看到新的文章了。
9.主题自定义一般在根目录下config.toml 里修改，或是在themes 里的相关文件，一般需要看对应的主题文档用户手册。 需要继续研究探索，玩转自己的个人博客。</description>
    </item>
    
    <item>
      <title>Position属性</title>
      <link>https://zhengjiaqun.github.io/post/new/</link>
      <pubDate>Thu, 25 Jul 2019 09:05:13 +0800</pubDate>
      
      <guid>https://zhengjiaqun.github.io/post/new/</guid>
      <description>本篇文章主要介绍元素的Position属性，此属性可以设置元素在页面的定位方式。
Position 属性：规定元素的定位类型。即元素脱离文档流的布局，在页面的任意位置显示。
①absolute ：绝对定位；脱离文档流的布局，遗留下来的空间由后面的元素填充。定位的起始位置为最近的父元素(postion不为static)，否则为Body文档本身。
②relative ：相对定位；不脱离文档流的布局，只改变自身的位置，在文档流原先的位置遗留空白区域。定位的起始位置为此元素原先在文档流的位置。
③fixed ：固定定位；类似于absolute，但不随着滚动条的移动而改变位置。
④static ：默认值；默认布局。
position属性只是使元素脱离文档流，要想此元素能按照希望的位置显示，就需要使用下面的属性(position:static不支持这些)：
①left ： 表示向元素的左边插入多少像素，使元素向右移动多少像素。
②right ：表示向元素的右边插入多少像素，使元素向左移动多少像素。
③top ：表示向元素的上方插入多少像素，使元素向下移动多少像素。
④bottom ：表示向元素的下方插入多少像素，使元素向上移动多少像素。
上面属性的值可以为负，单位：px 。
position:absolute 绝对定位；脱离文档流的布局，遗留下来的空间由后面的元素填充。定位的起始位置为最近的父元素(postion不为static)，否则为Body文档本身。
position:relative 相对定位；不脱离文档流的布局，只改变自身的位置，在文档流原先的位置遗留空白区域。定位的起始位置为此元素原先在文档流的位置。
position:fixed 固定定位；类似于absolute，但不随着滚动条的移动而改变位置。
position:static 默认定位，表示此元素为默认定位方式。
总结 当含有position属性的元素为最边缘元素时：
①absolute 和 relative ：含有此2个值的边缘元素，浏览器缩小到此元素不可见时，会出现滚动条。
②fixed ：含有此值的边缘元素，浏览器缩小到此元素不可见时，不会出现滚动条。</description>
    </item>
    
    <item>
      <title>委托</title>
      <link>https://zhengjiaqun.github.io/post/second/</link>
      <pubDate>Tue, 16 Jul 2019 16:53:13 +0800</pubDate>
      
      <guid>https://zhengjiaqun.github.io/post/second/</guid>
      <description>委托：委托给了C#操作函数的灵活性，我们可使用委托像操作变量一样来操作函数，其实这个功能并不是C#的首创，早在C++时代就有函数指针这一说法，而在我看来委托就是C#的函数指针，首先先简要的介绍一下委托的基本知识：
1.委托的定义 1.1 委托的声明原型是 delegate &amp;lt;函数返回类型&amp;gt; &amp;lt;委托名&amp;gt; (&amp;lt;函数参数&amp;gt;) 例子：public delegate void CheckDelegate(int number);//定义了一个委托CheckDelegate,它可以注册返回void类型且有一个int作为参数的函数。
这样就定义了一个委托，但是委托在.net内相当于声明了一个类(在后面的代码中会讲到确实如此)，类如果不实例化为对象，很多功能是没有办法使用的，委托也是如此.
2.委托的实例化 2.1 委托实例化的原型是 &amp;lt;委托类型&amp;gt; &amp;lt;实例化名&amp;gt;=new &amp;lt;委托类型&amp;gt;(&amp;lt;注册函数&amp;gt;) 例子：CheckDelegate _checkDelegate=new CheckDelegate(CheckMod);//用函数CheckMod实例化上面的CheckDelegate 委托为_checkDelegate：
2.2 在.net 2.0开始可以直接用匹配的函数实例化委托： &amp;lt;委托类型&amp;gt; &amp;lt;实例化名&amp;gt;=&amp;lt;注册函数&amp;gt; 例子：CheckDelegate _checkDelegate=CheckMod;//用函数CheckMod实例化上面的CheckDelegate 委托为_checkDelegate。
现在我们就可以像使用函数一样来使用委托了,在上面的例子中现在执行_checkDelegate()就等同于执行CheckMod(),最关键的是现在函数CheckMod相当于放在了变量当中，它可以传递给其它的CheckDelegate引用对象，而且可以作为函数参数传递到其他函数内，也可以作为函数的返回类型</description>
    </item>
    
    <item>
      <title>MarkDown语法</title>
      <link>https://zhengjiaqun.github.io/post/third/</link>
      <pubDate>Tue, 16 Jul 2019 16:02:41 +0800</pubDate>
      
      <guid>https://zhengjiaqun.github.io/post/third/</guid>
      <description> 标题一 标题二 标题三 </description>
    </item>
    
    <item>
      <title>这是我的第一篇博客文章</title>
      <link>https://zhengjiaqun.github.io/post/first/</link>
      <pubDate>Tue, 16 Jul 2019 15:07:11 +0800</pubDate>
      
      <guid>https://zhengjiaqun.github.io/post/first/</guid>
      <description>个人博客网站搭建成功，以后就可以写写笔记了。。。
第一篇博客文章 一、MVC简介
MVC：Model-View-Controller（模型-视图-控制器），MVC是一种软件开发架构模式。
1、模型（Model）
模型对象是实现应用程序数据域逻辑的应用程序部件。 通常，模型对象会检索模型状态并将其存储在数据库中。 例如，Product 对象可能会从数据库中检索信息，操作该信息，然后将更新的信息写回到数据库内的 Product 表中。
2、视图（View）
视图是显示应用程序用户界面 (UI) 的组件。通常，此 UI 是用模型数据创建的。Product表的编辑视图便是一个视图示例，该视图基于 Product 对象的当前状态显示文本框、下拉列表和复选框。
3、控制器(Controller)
控制器是处理用户交互、使用模型并最终选择要呈现的视图来显示 UI 的组件。 在MVC 应用程序中，视图仅显示信息；控制器则用于处理和响应用户输入和交互。 例如，控制器处理查询字符串值，并将这些值传递给模型，而模型可能会使用这些值来查询数据库。</description>
    </item>
    
  </channel>
</rss>